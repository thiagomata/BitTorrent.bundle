################################################################################
import movies
import re
import tmdb

################################################################################
PREFIX = '/video/bittorrent'

RE_MAGNET_INFO_HASH = re.compile('xt=urn:btih:([a-zA-Z0-9]+)')
RE_MOVIE_TITLE      = re.compile('(.+)\s+(\(|\[)?(\d{4})(\)|\])?\s+(.+)')
RE_TVSHOW_TITLE     = re.compile('(.+)\s+S?(\d{1,})(E|x)(\d{2,})?\s+(.+)')

################################################################################
class TorrentInfo:
    def __init__(self, magnet, title, seeders, leechers, url):
        self.magnet    = magnet
        self.info_hash = RE_MAGNET_INFO_HASH.search(magnet).group(1).lower()
        self.title     = title
        self.release   = get_torrent_release(title)
        self.seeders   = seeders
        self.leechers  = leechers
        self.url       = url
        self.data      = {}

################################################################################
def get_torrent_release(torrent_title):
    movie_title_result = RE_MOVIE_TITLE.search(torrent_title.replace('.', ' '))
    return movie_title_result.group(5) if movie_title_result else torrent_title

################################################################################
class TorrentProvider:
    ############################################################################
    # ANIME
    ############################################################################
    def anime_get_popular_torrents(self, torrent_infos):
        pass

    def anime_search(self, query, torrent_infos):
        pass

    def anime_get_specific_torrents(self, movie_info, torrent_infos):
        pass

    def anime_get_metadata_object_for_url(self, url):
        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info and torrent_info.data['category'] == 'anime':
            metadata_object         = MovieObject()
            metadata_object.title   = torrent_info.title
            metadata_object.summary = '{0}\nSeeders: {1}, Leechers: {2}\n\n{3}'.format(torrent_info.release, torrent_info.seeders, torrent_info.leechers, metadata_object.summary)

            return metadata_object

    ############################################################################
    # MOVIES
    ############################################################################
    def movies_get_popular_torrents(self, torrent_infos):
        pass

    def movies_search(self, query, torrent_infos):
        pass

    def movies_get_specific_torrents(self, movie_info, torrent_infos):
        pass

    def movies_get_metadata_object_for_url(self, url):
        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info and torrent_info.data['category'] == 'movies':
            metadata_object       = MovieObject()
            metadata_object.title = torrent_info.title

            movie_info = movies.MovieInfo(metadata_object.title)
            if movie_info.tmdb_id:
                tmdb.fill_movie_metadata_object(movie_info.tmdb_id, metadata_object)
            elif 'imdb_id' in torrent_info.data:
                tmdb.fill_movie_metadata_object(torrent_info.data['imdb_id'], metadata_object)
            
            metadata_object.summary = '{0}\nSeeders: {1}, Leechers: {2}\n\n{3}'.format(torrent_info.release, torrent_info.seeders, torrent_info.leechers, metadata_object.summary)

            return metadata_object

    ############################################################################
    # TVSHOWS
    ############################################################################
    def tvshows_get_popular_torrents(self, torrent_infos):
        pass

    def tvshows_search(self, query, torrent_infos):
        pass

    def tvshows_get_specific_torrents(self, movie_info, torrent_infos):
        pass

    def tvshows_get_metadata_object_for_url(self, url):
        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info and torrent_info.data['category'] == 'tvshows':
            metadata_object         = MovieObject()
            metadata_object.title   = torrent_info.title
            metadata_object.summary = '{0}\nSeeders: {1}, Leechers: {2}\n\n{3}'.format(torrent_info.release, torrent_info.seeders, torrent_info.leechers, metadata_object.summary)

            return metadata_object

    ############################################################################
    # COMMON
    ############################################################################
    def get_torrent_info_for_url(self, url):
        pass

    def get_metadata_object_for_url(self, url):
        metadata_object = self.movies_get_metadata_object_for_url(url)
        if metadata_object:
            return metadata_object

        metadata_object = self.tvshows_get_metadata_object_for_url(url)
        if metadata_object:
            return metadata_object

        torrent_info = self.get_torrent_info_for_url(url)
        if torrent_info:
            videoclip_object         = VideoClipObject()
            videoclip_object.title   = torrent_info.title
            videoclip_object.summary = 'Seeders: {0}, Leechers: {1}'.format(torrent_info.seeders, torrent_info.leechers)
            videoclip_object.url     = torrent_info.url
            return videoclip_object

    def get_media_objects_for_url(self, url, play_func):
        torrent_info = self.get_torrent_info_for_url(url)

        if torrent_info:
            media_object = MediaObject()
            media_object.add(PartObject(key=Callback(play_func, url=url, magnet=torrent_info.magnet)))
            return [media_object]

    def add_torrent_info(self, torrent_infos, movie_key, torrent_magnet, torrent_title, torrent_seeders, torrent_leechers, torrent_url):
        torrent_info = TorrentInfo(torrent_magnet, torrent_title, torrent_seeders, torrent_leechers, torrent_url)

        if movie_key and movies.MovieInfo(torrent_info.title).key != movie_key:
            return

        if torrent_info.seeders > 0 and not [t for t in torrent_infos if torrent_info.info_hash == t.info_hash]:
            torrent_infos.append(torrent_info)
