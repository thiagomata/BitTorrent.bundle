################################################################################
import common
import predb
import thepiratebay
import tmdb
import torrent2http

################################################################################
THEMOVIEDB     = 'http://www.themoviedb.org'
THEMOVIEDB_RE  = Regex('http://www\.themoviedb\.org/tv/(\d+)/season/(\d+)/episode/(\d+)')
THEMOVIEDB_API = 'http://api.themoviedb.org/3'

API_KEY = 'a3dc111e66105f6387e99393813ae4d5'

TMDB_CONFIG = None

################################################################################
def MetadataObjectForURL(url):
	html_data    = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)
	match_result = THEMOVIEDB_RE.match(url)

	tmdb_id       = match_result.group(1)
	show_name     = html_data.xpath('//h3[@class="show_title"]/a/text()')[0]
	season_index  = int(match_result.group(2))
	episode_index = int(match_result.group(3))

	return create_episode_object(tmdb_id, show_name, season_index, episode_index, False)

################################################################################
def MediaObjectsForURL(url, play_func):
	html_data    = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)
	match_result = THEMOVIEDB_RE.match(url)

	show_name     = html_data.xpath('//h3[@class="show_title"]/a/text()')[0]
	season_index  = int(match_result.group(2))
	episode_index = int(match_result.group(3))

	releases = predb.get_tvshow_releases(show_name, season_index, episode_index)

	media_objects = []
	for release in releases:
		tpb_search_url  = thepiratebay.THEPIRATEBAY_SEARCH.format(String.Quote(release))
		tpb_search_html = HTML.ElementFromURL(tpb_search_url, cacheTime=CACHE_1DAY)

		try:
			release_item        = tpb_search_html.xpath('//*[@id="searchResult"]/tr')[0]
			release_item_url    = thepiratebay.THEPIRATEBAY + release_item.xpath('./td[2]/div/a/@href')[0]
			release_item_magnet = release_item.xpath('./td[2]/a/@href')[0]

			media_object = MediaObject()
			media_object.audio_channels   = 2
			media_object.audio_codec      = 'ac3' if '720p' in release else 'mp3'
			media_object.video_resolution = 720 if '720p' in release else 480
			media_object.video_codec      = 'h264' if 'x264' in release else 'xvid'
			media_object.add(PartObject(key=Callback(play_func, url=release_item_url, magnet=release_item_magnet)))
			media_objects.append(media_object)
		except:
			pass

	if not media_objects:
		raise Ex.MediaNotAvailable

	media_objects.sort(key=lambda obj: obj.video_resolution, reverse=True)
	return media_objects

################################################################################
def create_episode_object(tmdb_id, show_name, season_index, episode_index, set_url=True):
	json_url  = THEMOVIEDB_API + '/tv/{0}/season/{1}/episode/{2}?&api_key={3}'.format(tmdb_id, season_index, episode_index, API_KEY)
	json_data = JSON.ObjectFromURL(json_url, cacheTime=CACHE_1DAY)

	episode_object         = EpisodeObject()
	episode_object.show    = show_name
	episode_object.season  = season_index
	episode_object.index   = json_data['episode_number']
	episode_object.title   = json_data['name']
	episode_object.summary = json_data['overview']
	episode_object.rating  = json_data['vote_average']
	episode_object.art     = get_image_url(json_data['still_path'])
	episode_object.thumb   = get_image_url(json_data['still_path'])

	try:
		episode_object.originally_available_at = Datetime.ParseDate(movie_data['air_date']).date()
		episode_object.year                    = episode_object.originally_available_at.year
	except:
		pass

	if set_url:
		episode_object.url = THEMOVIEDB + '/tv/{0}/season/{1}/episode/{2}'.format(tmdb_id, episode_object.season, episode_object.index)

	return episode_object

###############################################################################
def get_config():
	global TMDB_CONFIG

	if TMDB_CONFIG == None:
		TMDB_CONFIG = JSON.ObjectFromURL(THEMOVIEDB_API + '/configuration?api_key={0}'.format(API_KEY), cacheTime=CACHE_1WEEK)
	
	return TMDB_CONFIG

###############################################################################
def get_image_url(field):
	try:
		return get_config()['images']['base_url'] + 'original' + field
	except:
		pass
