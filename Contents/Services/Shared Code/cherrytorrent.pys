###############################################################################
import common
import json
import os
import platform
import socket
import stat
import subprocess
import threading
import time

###############################################################################
def play_torrent(url, magnet, play_func, port):
    try:
        if port == -1:
            port = start_cherrytorrent(url, magnet)

        status_json = JSON.ObjectFromURL(get_url(port, 'status'), cacheTime=0, timeout=5)
            
        if int(status_json['session']['state_index']) >= 3 and status_json['video_file']['path']:
            complete_pieces = status_json['video_file']['complete_pieces']
            total_pieces    = status_json['video_file']['total_pieces']
            pieces_ratio    = (float(complete_pieces) / float(total_pieces)) * 100.0
            if pieces_ratio > 0.5:
                return IndirectResponse(VideoClipObject, key=get_url(port, 'video'))
            else:
                Log.Info('[BitTorrent][cherrytorrent][{0}] Not enough pieces yet: {1}/{2} -> {3}% @ {4} kb/s'.format(port, complete_pieces, total_pieces, pieces_ratio, status_json['session']['download_rate']))
        else:
            Log.Info('[BitTorrent][cherrytorrent][{0}] Not ready yet: {1}'.format(port, status_json['session']['state']))

    except Exception as exception:
        Log.Error('[BitTorrent][cherrytorrent] Unhandled exception: {0}'.format(exception))

    time.sleep(2)
    return IndirectResponse(VideoClipObject, key=Callback(play_func, url=url, magnet=magnet, port=port))

###############################################################################
def start_cherrytorrent(url, magnet):
    clean_zombie_port_files()

    downloader_port    = 5001
    downloader_running = False

    for file_name in os.listdir(get_bin_dir()):
        file_path = os.path.join(get_bin_dir(), file_name)
        if os.path.isfile(file_path) and file_name.isdigit():
            file_fd      = os.open(file_path, os.O_RDONLY)
            file_content = os.read(file_fd, 1024)
            os.close(file_fd)
            if file_content == url:
                if is_instance_running(int(file_name)):
                    downloader_port = int(file_name)
                    downloader_running = True
                    Log.Info('[BitTorrent][cherrytorrent][{0}] Found port file'.format(downloader_port))
                    break

    if not downloader_running:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind(('', 0))
        downloader_port = s.getsockname()[1]
        s.close()

        Log.Info('[BitTorrent][cherrytorrent][{0}] Writing port file'.format(downloader_port))
        downloader_port_file = os.path.join(get_bin_dir(), str(downloader_port))
        downloader_port_fd   = os.open(downloader_port_file, os.O_CREAT | os.O_RDWR)
        os.write(downloader_port_fd, url)
        os.close(downloader_port_fd)

        # chmod 755
        os.chmod(get_exec_path(), stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)

        command =   [
                        '{0}'.format(get_exec_path()),
                        '-hp', str(downloader_port),
                        '-ht', str(30),
                        '-tdl', Prefs['MAX_DOWNLOAD_RATE'],
                        '-tul', Prefs['MAX_UPLOAD_RATE'],
                        '-td', Prefs['DOWNLOAD_DIR']
                    ]

        if Prefs['KEEP_FILES']:
            command.append('-tk')

        command.append(magnet)

        Log.Info('[BitTorrent][cherrytorrent][{0}] {1}'.format(downloader_port, ' '.join(command)))
        subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    return downloader_port

###############################################################################
def get_url(port, page):
    return 'http://' + Network.Address + ':' + str(port) + '/' + page

###############################################################################
def get_bin_dir():
    bundle_directory = os.path.join(os.getcwd(), '..', '..', '..', 'Plug-ins', 'BitTorrent.bundle')
    bundle_directory = bundle_directory.replace('\\\\?\\', '')
    return os.path.normpath(os.path.join(bundle_directory, 'Contents', 'Bin'))

###############################################################################
def get_exec_dir():
    if Platform.OS == 'MacOSX':
        return os.path.join(get_bin_dir(), 'MacOSX')
    elif Platform.OS == 'Linux':
        if platform.architecture()[0] == '64bit':
            return os.path.join(os.path.join(get_bin_dir(), 'Linux'), 'x64')
        elif platform.architecture()[0] == '32bit':
            return os.path.join(os.path.join(get_bin_dir(), 'Linux'), 'x86')
    elif Platform.OS == 'Windows':
        return os.path.join(get_bin_dir(), 'Windows')
    
    Log.Error('[BitTorrent][cherrytorrent] Unsupported OS: {0}'.format(Platform.OS))

###############################################################################
def get_exec_path():
    if Platform.OS == 'MacOSX':
        return os.path.join(get_exec_dir(), 'cherrytorrent')
    elif Platform.OS == 'Linux':
        return os.path.join(get_exec_dir(), 'cherrytorrent')
    elif Platform.OS == 'Windows':
        return os.path.join(get_exec_dir(), 'cherrytorrent.exe')
    
    Log.Error('[BitTorrent][cherrytorrent] Unsupported OS: {0}'.format(Platform.OS))

###############################################################################
def clean_zombie_port_files():
    files_to_delete = []

    for file_name in os.listdir(get_bin_dir()):
        file_path = os.path.join(get_bin_dir(), file_name)
        if os.path.isfile(file_path) and file_name.isdigit():
            if not is_instance_running(int(file_name)):
                files_to_delete.append(file_name)

    for file_name in files_to_delete:
        Log.Info('[BitTorrent][cherrytorrent][clean_zombie_port_files][{0}] Removing zombie port file'.format(int(file_name)))
        file_path = os.path.join(get_bin_dir(), file_name)
        os.remove(file_path)

###############################################################################
def is_instance_running(port):
    try:
        status_json = JSON.ObjectFromURL(get_url(port, 'status'), cacheTime=0, timeout=5)
        return True
    except Exception as exception:
        Log.Error('[BitTorrent][cherrytorrent][is_instance_running][{0}] Unhandled exception: {1}'.format(port, exception))
        return False
